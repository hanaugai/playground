Generic Types

---

generic types for struct or enum

explicit using the ::<T> (= turbofish)
but, also supports type inference

struct BagOfHolding<T> {
    item: T,
}
BagOfHolding::<i32> { item: 42 }
BagOfHolding { item: 3.14 }

---

None represents null

---

a built in generic enum Option like
enum Option<T> {
    None,
    Some(T),
}

---

a built in generic enum Result like
enum Result<T, E> {
    Ok(T),
    Err(E),
}

---

graceful error handling

exit when error with "?"

do_something_that_might_fail()?

match do_something_that_might_fail() {
    Ok(v) => v,
    Err(e) => return Err(e),
}

---

Ugly Option/Result Handling

my_option.unwrap()

match my_option {
    Some(v) => v,
    None => panic!("some error message generated by Rust!"),
}

my_result.unwrap()

match my_result {
    Ok(v) => v,
    Err(e) => panic!("some error message generated by Rust!"),
}

---

vector

Vec::<i32>::new();
let mut a = Vec::new();
a.push(1);

vec![1, 2];

---
