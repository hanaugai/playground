// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockDoer is an autogenerated mock type for the Doer type
type MockDoer struct {
	mock.Mock
}

type MockDoer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoer) EXPECT() *MockDoer_Expecter {
	return &MockDoer_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: s
func (_m *MockDoer) Do(s string) string {
	ret := _m.Called(s)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDoer_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockDoer_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - s string
func (_e *MockDoer_Expecter) Do(s interface{}) *MockDoer_Do_Call {
	return &MockDoer_Do_Call{Call: _e.mock.On("Do", s)}
}

func (_c *MockDoer_Do_Call) Run(run func(s string)) *MockDoer_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDoer_Do_Call) Return(_a0 string) *MockDoer_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoer_Do_Call) RunAndReturn(run func(string) string) *MockDoer_Do_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDoer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDoer creates a new instance of MockDoer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDoer(t mockConstructorTestingTNewMockDoer) *MockDoer {
	mock := &MockDoer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
